{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0027193372493037843\n",
      "小川未明\n",
      "坂口安吾\n",
      "野村胡堂\n",
      "芥川龍之介\n",
      "牧野信一\n",
      "豊島与志雄\n",
      "寺田寅彦\n",
      "宮沢賢治\n",
      "太宰治\n",
      "岡本綺堂\n",
      "田中貢太郎\n",
      "萩原朔太郎\n",
      "海野十三\n",
      "折口信夫\n",
      "夢野久作\n",
      "坂本龍馬\n",
      "泉鏡花\n",
      "堀辰雄\n",
      "北大路魯山人\n",
      "原民喜\n",
      "今野大力\n",
      "中谷宇吉郎\n",
      "吉川英治\n",
      "岡本かの子\n",
      "新美南吉\n",
      "done\n"
     ]
    }
   ],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "\n",
    "import pandas as pd\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "from matplotlib.font_manager import FontProperties\n",
    "import numpy as np\n",
    "from sklearn.utils import shuffle\n",
    "import csv\n",
    "\n",
    "#import tf_idf_kanji_dict as kanji_tool\n",
    "\n",
    "'''\n",
    "Kanji character starts from column 6-5689\n",
    "\n",
    "P(author | text) = P(text | author)P(author)/P(text)\n",
    "which is\n",
    "\n",
    "P(author | character) = P(character | author)P(author)/P(character)\n",
    "Possible issues include Probabilities being small?\n",
    "\n",
    "Obtained P(author) and P(character)\n",
    "\n",
    "Now need P(character | author)\n",
    "\n",
    "for each author in df:\n",
    "    author_character_count+= char count\n",
    "    \n",
    "    \n",
    "But now how to use test data?\n",
    "\n",
    "'''\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "fName_train = 'training.csv'\n",
    "fName_test = 'test.csv'\n",
    "\n",
    "df = pd.read_csv(fName_train)\n",
    "df_test = pd.read_csv(fName_test)\n",
    "\n",
    "num_works = len(df['author'])\n",
    "\n",
    "''' Considering all Kanji, and count'''\n",
    "kanji_s = df.columns.tolist()\n",
    "kanji_s = kanji_s[6:]\n",
    "kanji_totals = {}\n",
    "for kanji in kanji_s:\n",
    "    kanji_totals[kanji] = df[kanji].sum()\n",
    "total_kanji_used = sum(kanji_totals.values())\n",
    "\n",
    "\n",
    "''' Probability of the Kanji appearing, throughout all texts\n",
    "    Might be useful to determine which words are not useful as very common words => less information\n",
    "    Explore idea later on with TFIDF\n",
    "'''\n",
    "num_unique_kanji = len(kanji_totals)\n",
    "kanji_prob = {}\n",
    "for kanji in kanji_s:\n",
    "    kanji_prob[kanji] = kanji_totals[kanji]/total_kanji_used\n",
    "    \n",
    "author_counts = dict(df['author'].value_counts())\n",
    "author_prob = {}\n",
    "\n",
    "\n",
    "''' How many works are written by the author'''\n",
    "for author, counts in author_counts.items():\n",
    "    author_prob[author] = int(counts)/num_works\n",
    "\n",
    "'''How often did the author use each Kanji character, combining all works'''\n",
    "df2 = df.groupby('author').agg('sum')\n",
    "\n",
    "df2['total_character_used'] = df2.iloc[:,3:].sum(axis=1)\n",
    "for ind in range(num_unique_kanji):\n",
    "    df2.iloc[:,3+ind] = df2.iloc[:,3+ind]/df2['total_character_used']\n",
    "#print(df2)\n",
    "\n",
    "\n",
    "print(df2.loc['中谷宇吉郎', '私'])\n",
    "\n",
    "\n",
    "kanji_ordering = df2.columns.tolist()\n",
    "kanji_ordering = kanji_ordering[3:]\n",
    "\n",
    "'''\n",
    "For each input in test data:\n",
    "P(author_j|c1, c2, ...) = P(author_j)^n(P(c)^{-num word})(P(c1|author_j))^k(P(c2|author)...P(cn|author)\n",
    "have this be prob_being_author_1\n",
    "'''\n",
    "\n",
    "#Division by zero in kanji_occurence_prob\n",
    "\n",
    "eps = 10**(-8)\n",
    "for author, prob in author_prob.items():\n",
    "    df_test[str(author)+'_prob'] = 1\n",
    "    print(author)\n",
    "    for ind in range(num_unique_kanji):\n",
    "        kanji = kanji_ordering[ind]\n",
    "        kanji_occurence_prob = kanji_prob[kanji]+eps\n",
    "        is_kanji_present = np.where(df_test[kanji]>0,1,0)\n",
    "        \n",
    "        prob_kanji_given_author = np.log(1*(1-is_kanji_present)+np.power(prob*(kanji_occurence_prob+df2.loc[author, kanji])/kanji_occurence_prob,is_kanji_present))\n",
    "        #print(prob_kanji_given_author)\n",
    "        df_test[str(author)+'_prob']+=prob_kanji_given_author\n",
    "\n",
    "print('done')\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1118\n",
      "0        牧野信一\n",
      "1         堀辰雄\n",
      "2        海野十三\n",
      "3        夢野久作\n",
      "4        牧野信一\n",
      "5       中谷宇吉郎\n",
      "6        海野十三\n",
      "7        折口信夫\n",
      "8         泉鏡花\n",
      "9         堀辰雄\n",
      "10       小川未明\n",
      "11      芥川龍之介\n",
      "12       小川未明\n",
      "13        泉鏡花\n",
      "14       宮沢賢治\n",
      "15       小川未明\n",
      "16      豊島与志雄\n",
      "17       小川未明\n",
      "18       小川未明\n",
      "19        太宰治\n",
      "20       岡本綺堂\n",
      "21      田中貢太郎\n",
      "22      萩原朔太郎\n",
      "23       野村胡堂\n",
      "24       岡本綺堂\n",
      "25       折口信夫\n",
      "26       坂口安吾\n",
      "27       坂本龍馬\n",
      "28       牧野信一\n",
      "29       宮沢賢治\n",
      "        ...  \n",
      "1088      太宰治\n",
      "1089      堀辰雄\n",
      "1090     宮沢賢治\n",
      "1091     牧野信一\n",
      "1092     今野大力\n",
      "1093    田中貢太郎\n",
      "1094     吉川英治\n",
      "1095    田中貢太郎\n",
      "1096     野村胡堂\n",
      "1097     小川未明\n",
      "1098     牧野信一\n",
      "1099     小川未明\n",
      "1100    芥川龍之介\n",
      "1101     岡本綺堂\n",
      "1102    芥川龍之介\n",
      "1103     坂本龍馬\n",
      "1104     吉川英治\n",
      "1105     寺田寅彦\n",
      "1106    田中貢太郎\n",
      "1107     坂本龍馬\n",
      "1108     坂口安吾\n",
      "1109    芥川龍之介\n",
      "1110     折口信夫\n",
      "1111     吉川英治\n",
      "1112     岡本綺堂\n",
      "1113     坂口安吾\n",
      "1114     坂口安吾\n",
      "1115    豊島与志雄\n",
      "1116      泉鏡花\n",
      "1117      太宰治\n",
      "Name: author, Length: 1118, dtype: object 0       坂口安吾\n",
      "1       坂口安吾\n",
      "2       坂口安吾\n",
      "3       坂口安吾\n",
      "4       坂口安吾\n",
      "5       小川未明\n",
      "6       坂口安吾\n",
      "7       坂口安吾\n",
      "8       坂口安吾\n",
      "9       小川未明\n",
      "10      小川未明\n",
      "11      坂口安吾\n",
      "12      小川未明\n",
      "13      野村胡堂\n",
      "14      坂口安吾\n",
      "15      小川未明\n",
      "16      坂口安吾\n",
      "17      小川未明\n",
      "18      小川未明\n",
      "19      坂口安吾\n",
      "20      坂口安吾\n",
      "21      坂口安吾\n",
      "22      小川未明\n",
      "23      坂口安吾\n",
      "24      坂口安吾\n",
      "25      坂口安吾\n",
      "26      坂口安吾\n",
      "27      坂口安吾\n",
      "28      坂口安吾\n",
      "29      小川未明\n",
      "        ... \n",
      "1088    坂口安吾\n",
      "1089    坂口安吾\n",
      "1090    小川未明\n",
      "1091    坂口安吾\n",
      "1092    小川未明\n",
      "1093    小川未明\n",
      "1094    坂口安吾\n",
      "1095    坂口安吾\n",
      "1096    野村胡堂\n",
      "1097    小川未明\n",
      "1098    坂口安吾\n",
      "1099    小川未明\n",
      "1100    坂口安吾\n",
      "1101    坂口安吾\n",
      "1102    坂口安吾\n",
      "1103    坂口安吾\n",
      "1104    坂口安吾\n",
      "1105    坂口安吾\n",
      "1106    坂口安吾\n",
      "1107    坂口安吾\n",
      "1108    坂口安吾\n",
      "1109    坂口安吾\n",
      "1110    坂口安吾\n",
      "1111    坂口安吾\n",
      "1112    坂口安吾\n",
      "1113    坂口安吾\n",
      "1114    坂口安吾\n",
      "1115    坂口安吾\n",
      "1116    坂口安吾\n",
      "1117    坂口安吾\n",
      "Name: closest, Length: 1118, dtype: object 0       False\n",
      "1       False\n",
      "2       False\n",
      "3       False\n",
      "4       False\n",
      "5       False\n",
      "6       False\n",
      "7       False\n",
      "8       False\n",
      "9       False\n",
      "10      False\n",
      "11      False\n",
      "12      False\n",
      "13      False\n",
      "14      False\n",
      "15      False\n",
      "16      False\n",
      "17      False\n",
      "18      False\n",
      "19      False\n",
      "20      False\n",
      "21      False\n",
      "22      False\n",
      "23      False\n",
      "24      False\n",
      "25      False\n",
      "26      False\n",
      "27      False\n",
      "28      False\n",
      "29      False\n",
      "        ...  \n",
      "1088    False\n",
      "1089    False\n",
      "1090    False\n",
      "1091    False\n",
      "1092    False\n",
      "1093    False\n",
      "1094    False\n",
      "1095    False\n",
      "1096    False\n",
      "1097    False\n",
      "1098    False\n",
      "1099    False\n",
      "1100    False\n",
      "1101    False\n",
      "1102    False\n",
      "1103    False\n",
      "1104    False\n",
      "1105    False\n",
      "1106    False\n",
      "1107    False\n",
      "1108    False\n",
      "1109    False\n",
      "1110    False\n",
      "1111    False\n",
      "1112    False\n",
      "1113    False\n",
      "1114    False\n",
      "1115    False\n",
      "1116    False\n",
      "1117    False\n",
      "Name: match, Length: 1118, dtype: bool\n",
      "1118\n",
      "1118\n"
     ]
    }
   ],
   "source": [
    "author_list_prob = df_test.columns.tolist()[-25:]\n",
    "num_texts = len(df_test)\n",
    "print(num_texts)\n",
    "\n",
    "for ind in range(num_texts):\n",
    "    #most_likely_author_idx = (df_test.iloc[ind, -25:]).idxmax\n",
    "    #print(author_list_prob)\n",
    "    df_test['closest'] = df_test[author_list_prob].idxmax(axis=1)\n",
    "    #print(df_test.iloc[ind, -25:])\n",
    "    \n",
    "df_test['closest'] = df_test['closest'].str.replace('_prob', '')\n",
    "\n",
    "df_test['match'] = df_test['author'].equals(df_test['closest'])\n",
    "print(df_test['author'], df_test['closest'],df_test['match'])\n",
    "print(df_test['author'].count())\n",
    "print(df_test['match'].count())\n",
    "\n",
    "    #most_likely_author = author_list_prob[most_likely_author_idx]\n",
    "    #print(most_likely_author.rsplit('prob'))\n",
    "    #d_test['author_guess']  =  most_likely_author.rsplit('prob')[0]\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       False\n",
      "1       False\n",
      "2       False\n",
      "3       False\n",
      "4       False\n",
      "5       False\n",
      "6       False\n",
      "7       False\n",
      "8       False\n",
      "9       False\n",
      "10      False\n",
      "11      False\n",
      "12      False\n",
      "13      False\n",
      "14      False\n",
      "15      False\n",
      "16      False\n",
      "17      False\n",
      "18      False\n",
      "19      False\n",
      "20      False\n",
      "21      False\n",
      "22      False\n",
      "23      False\n",
      "24      False\n",
      "25      False\n",
      "26      False\n",
      "27      False\n",
      "28      False\n",
      "29      False\n",
      "        ...  \n",
      "1088    False\n",
      "1089    False\n",
      "1090    False\n",
      "1091    False\n",
      "1092    False\n",
      "1093    False\n",
      "1094    False\n",
      "1095    False\n",
      "1096    False\n",
      "1097    False\n",
      "1098    False\n",
      "1099    False\n",
      "1100    False\n",
      "1101    False\n",
      "1102    False\n",
      "1103    False\n",
      "1104    False\n",
      "1105    False\n",
      "1106    False\n",
      "1107    False\n",
      "1108    False\n",
      "1109    False\n",
      "1110    False\n",
      "1111    False\n",
      "1112    False\n",
      "1113    False\n",
      "1114    False\n",
      "1115    False\n",
      "1116    False\n",
      "1117    False\n",
      "Name: match, Length: 1118, dtype: bool\n"
     ]
    }
   ],
   "source": [
    "print(df_test['match'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
